const { Router } = require("express");
const {
  loadAreasFromCsv,
  loadLinesFromCsv,
  loadGasesFromCsv,
  createDeviceOptions,
  loadDevicesFromCsv,
  loadServicePointsFromCsv,
  loadRelationEqLsFromCsv,
  updateData,
} = require("./csvDeviceController");
const {
  createUserOptions,
  createUsers,
  createWOoptions,
  loadOTfromCsv,
} = require("./csvOTController");
const {
  loadInterventionFromCsv,
} = require("../../controllers/IntervController");
const Device = require("../../models/Device");
const ServicePoint = require("../../models/ServicePoint");
const WOoptions = require("../../models/WOoptions");
const Refrigerant = require("../../models/Refrigerant");
const User = require("../../models/User");
const WorkOrder = require("../../models/WorkOrder");
const Intervention = require("../../models/Intervention");
const CylinderUse = require("../../models/CylinderUse");

const workOrderController = require("../../controllersV2/workOrder");

const server = Router();

server.post("/areas", async (req, res) => {
  let results = [];
  try {
    results.push(await loadAreasFromCsv());
    res.status(200).send(results);
  } catch (e) {
    res.status(500).send(e.message);
  }
});

server.post("/lines", async (req, res) => {
  let results = [];
  try {
    results.push(await loadLinesFromCsv());
    res.status(200).send(results);
  } catch (e) {
    res.status(500).send(e.message);
  }
});

server.post("/servicepoints", async (req, res) => {
  let results = [];
  try {
    results.push(await loadServicePointsFromCsv());
    res.status(200).send(results);
  } catch (e) {
    res.status(500).send(e.message);
  }
});

server.post("/gases", async (req, res) => {
  let results = [];
  try {
    results.push(await loadGasesFromCsv());
    res.status(200).send(results);
  } catch (e) {
    res.status(500).send(e.message);
  }
});

server.post("/deviceoptions", async (req, res) => {
  let results = [];
  try {
    results.push(await createDeviceOptions());
    res.status(200).send(results);
  } catch (e) {
    res.status(500).send(e.message);
  }
});

server.post("/devices", async (req, res) => {
  let results = [];
  try {
    results.push(await loadDevicesFromCsv());
    res.status(200).send(results);
  } catch (e) {
    res.status(500).send(e.message);
  }
});

server.post("/relationeqls", async (req, res) => {
  let results = [];
  try {
    results.push(await loadRelationEqLsFromCsv());
    res.status(200).send(results);
  } catch (e) {
    res.status(500).send(e.message);
  }
});

server.post("/wooptions", async (req, res) => {
  let results = [];
  try {
    results.push(await createWOoptions());
    res.status(200).send(results);
  } catch (e) {
    res.status(500).send(e.message);
  }
});

server.post("/useroptions", async (req, res) => {
  let results = [];
  try {
    results.push(await createUserOptions());
    res.status(200).send(results);
  } catch (e) {
    res.status(500).send(e.message);
  }
});

server.post("/users", async (req, res) => {
  let results = [];
  console.log("running");

  // try {
  results.push(await createUsers());
  res.status(200).send(results);
  // } catch (e) {
  //   res.status(500).send(e.message);
  // }
});

server.post("/workorders", async (req, res) => {
  let results = [];
  try {
    results.push(await loadOTfromCsv());
    res.status(200).send(results);
  } catch (e) {
    res.status(500).send(e.message);
  }
});

server.post("/interventions", async (req, res) => {
  let results = [];
  try {
    results.push(await loadInterventionFromCsv());
    res.status(200).send(results);
  } catch (e) {
    res.status(500).send(e.message);
  }
});

server.get("/", async (req, res) => {
  res.send("no updates");
});

server.post("/", async (req, res) => {
  let results = [];
  try {
    // funci칩n que intenta identificar ordenes problem치ticas
    // const responsible = await User.findOne({ username: "JDURAN" }).lean();
    // console.log(responsible);
    // const orders = await WorkOrder.find({
    //   responsible: responsible._id,
    //   $and: [
    //     { "registration.date": { $gte: new Date("2025-04-07T00:00:00.000Z") } },
    //   ],
    // })
    //   .populate([
    //     {
    //       path: "device",
    //       populate: {
    //         path: "line",
    //         populate: { path: "area", populate: "plant" },
    //       },
    //     },
    //     { path: "responsible" },
    //   ])
    //   .lean();
    // const interventions = await Intervention.find({
    //   workOrder: { $in: orders.map(({ _id }) => _id) },
    //   isDeleted: { $ne: true },
    // }).lean();
    // const datePairs = orders.map((order) => {
    //   const { _id, code, description, registration, device } = order;
    //   const dateStr = registration?.date;
    //   if (dateStr) {
    //     const dateOnly = new Date(dateStr).toISOString().split("T")[0];
    //     const orderInterventions = interventions
    //       .filter(({ workOrder }) => workOrder.equals(_id))
    //       .map(({ _id }) => _id)
    //       .join(",");
    //     return [
    //       code,
    //       order.class,
    //       device.code,
    //       device.name,
    //       description,
    //       dateOnly,
    //       device?.line?.area?.plant?.name,
    //       orderInterventions || "Sin Intervenci칩n",
    //       order.responsible?.name || "Sin Responsable",
    //     ];
    //   }
    // });
    // results = datePairs;

    // funci칩n para anular OTs
    const user = await User.findOne({ idNumber: req.tokenData.id });
    const orderCodes = [
      86606, 86607, 86608, 86609, 86610, 86611, 86612, 86613, 86614, 86615,
      86616, 86617, 86618, 86626, 86627, 86628, 86630, 86631, 86632, 86633,
      86634, 86635, 86636, 86637, 86638, 86639, 86640, 86641, 86642, 86644,
      86645, 86646, 86647, 86648, 86649, 86650, 86651, 86652, 86654, 86655,
      86656, 86657, 86658, 86659, 86660, 86661, 86662, 86663, 86664, 86665,
      86666, 86668, 86669, 86670, 86671, 86672, 86673, 86674, 86675, 86676,
      86678, 86679, 86680, 86681, 86682, 86683, 86684, 86685, 86686, 86687,
      86688, 86689, 86690, 86692, 86693, 86694, 86695, 86696, 86697, 86698,
      86699, 86700, 86702, 86703, 86704, 86705, 86706, 86707, 86708, 86709,
      86710, 86711, 86712, 86713, 86714, 86716, 86717, 86718, 86719, 86720,
      86721, 86722, 86723, 86724, 86726, 86727, 86728, 86729, 86730, 86731,
      86732, 86733, 86734, 86735, 86736, 86738, 86740, 86741, 86742, 86743,
      86744, 86745, 86746, 86747, 86748, 86737, 86750, 86751, 86754, 86760,
      86759, 86761, 86752, 86755, 86762, 86756, 86757, 86758, 86753, 86764,
      86765, 86766, 86767, 86768, 86769, 86770, 86771, 86772, 86774, 86775,
      86776, 86777, 86778, 86779, 86780, 86781, 86782, 86783, 86784, 86785,
      86786, 86788, 86789, 86790, 86791, 86792, 86793, 86794, 86795, 86796,
      86798, 86799, 86800, 86801, 86802, 86803, 86804, 86805, 86806, 86807,
      86808, 86809, 86810, 86812, 86813, 86814, 86815, 86816, 86817, 86818,
      86822, 86824, 86828, 86829, 86830, 86831, 86832, 86833, 86834, 86836,
      86837, 86838, 86839, 86840, 86841, 86842, 86843, 86844, 86846, 86847,
      86848, 86849, 86850, 86851, 86852, 86853, 86855, 86854, 86856, 86857,
      86860, 86868, 86870, 86871, 86872, 86873, 86874, 86875, 86876, 86877,
      86878, 86879, 86880, 86881, 86882, 86884, 86885, 86886, 86887, 86888,
      86889, 86890, 86891, 86892, 86894, 86895, 86896, 86897, 86898, 86899,
      86900, 86901, 86902, 86903, 86904, 86905, 86906, 86908, 86909, 86910,
      86911, 86912, 86913, 86914, 86915, 86916, 86918, 86919, 86920, 86921,
      86922, 86923, 86924, 86925, 86926, 86927, 86928, 86929, 86930, 86932,
      86933, 86934, 86935, 86936, 86937, 86938, 86939, 86940, 86942, 86943,
      86944, 86945, 86946, 86947, 86948, 86949, 86950, 86951, 86952, 86953,
      86954, 86956, 86957, 86958, 86959, 86960, 86961, 86962, 86963, 86964,
      86966, 86967, 86968, 86969, 86970, 86971, 86972, 86973, 86974, 86975,
      86976, 86977, 86978, 86980, 86981, 86982, 86983, 86984, 86985, 86986,
      86987, 86988, 86990, 86991, 86992, 86993, 86994, 86995, 86996, 86997,
      86998, 86999, 87000, 87001, 87002, 87004, 87005, 87006, 87007, 87008,
      87009, 87010, 87011, 87012, 87014, 87015, 87016, 87017, 87018, 87019,
      87020, 87021, 87022, 87023, 87024, 87025, 87026, 87028, 87029, 87030,
      87031, 87032, 87033, 87034, 87035, 87036, 87038, 87039, 87040, 87041,
      87042, 87043, 87044, 87045, 87046, 87047, 87048, 87049, 87050, 87052,
      87053, 87054, 87055, 87056, 87057, 87058, 87059, 87060, 87062, 87063,
      87064, 87065, 87066, 87067, 87068, 87069, 87070, 87071, 87072, 87073,
      87074, 87076, 87077, 87078, 87079, 87080, 87081, 87082, 87083, 87084,
      87086, 87087, 87088, 87089, 87090, 87091, 87092, 87093, 87094, 87095,
      87096, 87097, 87098, 87100, 87101, 87102, 87103, 87104, 87105, 87106,
      87107, 87108, 87110, 87111, 87112, 87113, 87114, 87115, 87116, 87117,
      87118, 87119, 87120, 87121, 87122, 87124, 87125, 87126, 87127, 87128,
      87129, 87130, 87131, 87132, 87134, 87135, 87136, 87137, 87138, 87139,
      87140, 87141, 87142, 87143, 87144, 87145, 87146, 87148, 87149, 87150,
      87151, 87152, 87153, 87154, 87155, 87156, 87158, 87159, 87160, 87161,
      87162, 87163, 87164, 87165, 87166, 87167, 87168, 87169, 87170, 87172,
      87173, 87174, 87175, 87176, 87177, 87178, 87179, 87180, 87182, 87183,
      87184, 87185, 87186, 87187, 87188, 87189, 87190, 87191, 87192, 87193,
      87194, 87196, 87197, 87198, 87199, 87200, 87201, 87202, 87203, 87204,
      87206, 87207, 87208, 87209, 87210, 87211, 87212, 87213, 87214, 87215,
      87216, 87217, 87218, 87220, 87221, 87222, 87223, 87224, 87225, 87226,
      87227, 87228, 87230, 87231, 87232, 87233, 87234, 87235, 87236, 87237,
      87238, 87239, 87240, 87241, 87242, 87244, 87245, 87246, 87247, 87248,
      87249, 87250, 87251, 87252, 87254, 87255, 87256, 87257, 87258, 87259,
      87260, 87261, 87262, 87263, 87264, 87265, 87266, 87268, 87269, 87270,
      87271, 87272, 87273, 87274, 87275, 87276, 87278, 87279, 87280, 87281,
      87282, 87283, 87284, 87285, 87286, 87287, 87288, 87289, 87290, 87292,
      87293, 87294, 87295, 87296, 87297, 87298, 87299, 87300, 87302, 87303,
      87304, 87305, 87306, 87307, 87308, 87309, 87310, 87311, 87312, 87313,
      87314, 87316, 87318, 87319, 87320, 87321, 87322, 87323, 87324, 87317,
      87326, 87327, 87328, 87329, 87330, 87331, 87332, 87333, 87334, 87335,
      87336, 87337, 87338, 87340, 87341, 87342, 87343, 87344, 87345, 87346,
      87347, 87348, 87350, 87351, 87352, 87353, 87354, 87355, 87356, 87357,
      87358, 87359, 87360, 87361, 87362, 87364, 87365, 87366, 87367, 87368,
      87369, 87370, 87371, 87372, 87374, 87375, 87376, 87377, 87378, 87379,
      87380, 87381, 87382, 87383, 87384, 87385, 87386, 87388, 87389, 87390,
      87391, 87392, 87393, 87394, 87395, 87396, 87398, 87399, 87400, 87401,
      87402, 87403, 87404, 87405, 87406, 87407, 87408, 87409, 87410, 87412,
      87413, 87414, 87415, 87416, 87417, 87418, 87419, 87420, 87422, 87424,
      87423, 87425, 87426, 87427, 87428, 87429, 87430, 87431, 87432, 87433,
      87434, 87436, 87437, 87438, 87439, 87440, 87441, 87442, 87443, 87444,
      87446, 87447, 87448, 87449, 87450, 87451, 87452, 87453, 87454, 87455,
      87456, 87457, 87458, 87460, 87461, 87462, 87463, 87464, 87465, 87466,
      87467, 87468, 87470, 87471, 87472, 87473, 87474, 87475, 87476, 87477,
      87478, 87479, 87480, 87481, 87482, 87484, 87485, 87486, 87487, 87488,
      87489, 87490, 87491, 87492, 87494, 87495, 87496, 87497, 87498, 87499,
      87500, 87501, 87502, 87503, 87504, 87505, 87506, 87508, 87509, 87510,
      87511, 87512, 87513, 87514, 87515, 87516, 87518, 87519, 87520, 87521,
      87522, 87523, 87524, 87525, 87526, 87527, 87528, 87529, 87530, 87532,
      87533, 87534, 87535, 87536, 87537, 87538, 87539, 87540, 87542, 87543,
      87544, 87545, 87546, 87547, 87548, 87549, 87550, 87551, 87552, 87553,
      87554, 87556, 87557, 87558, 87559, 87560, 87561, 87562, 87563, 87564,
      87597, 87599, 87600, 87601, 87602, 87603, 87604, 87605, 87606, 87598,
      87596, 87607, 87608, 87611, 87610, 87612, 87613, 87614, 87615, 87616,
      87617, 87618, 87620, 87621, 87622, 87623, 87624, 87625, 87626, 87627,
      87628, 87629, 87630, 87631, 87632, 87634, 87635, 87636, 87637, 87638,
      87639, 87640, 87641, 87642, 87644, 87645, 87646, 87647, 87648, 87649,
      87650, 87651, 87652, 87653, 87654, 87655, 87656, 87658, 87659, 87660,
      87661, 87662, 87663, 87664, 87665, 87666, 87668, 87669, 87670, 87671,
      87672, 87673, 87674, 87675, 87676, 87677, 87678, 87679, 87680, 87682,
      87683, 87684, 87685, 87686, 87687, 87688, 87689, 87690, 87693, 87694,
      87695, 87696, 87697, 87698, 87699, 87700, 87701, 87702, 87703, 87704,
      87705, 87707, 87708, 87709, 87710, 87711, 87712, 87713, 87714, 87715,
      87717, 87718, 87719, 87720, 87721, 87722, 87723, 87724, 87725, 87726,
      87727, 87728, 87729, 87731, 87732, 87733, 87734, 87735, 87736, 87737,
      87738, 87739, 87749, 87750, 87751, 87752, 87754, 87755, 87756, 87757,
      87758, 87759, 87760, 87761, 87763, 87764, 87766, 87767, 87768, 87769,
      87753, 87770, 87765, 87771, 87773, 87774, 87775, 87776, 87777, 87778,
      87779, 87780, 87781, 87782, 87783, 87784, 87785, 87787, 87788, 87789,
      87790, 87791, 87792, 87793, 87794, 87795, 87797, 87798, 87800, 87799,
      87801, 87802, 87803, 87804, 87805, 87806, 87807, 87808, 87809, 87811,
      87812, 87813, 87814, 87815, 87816, 87817, 87818, 87819, 87821, 87823,
      87822, 87824, 87825, 87826, 87827, 87828, 87829, 87830, 87831, 87832,
      87833, 87835, 87836, 87837, 87838, 87839, 87840, 87841, 87842, 87843,
      87845, 87846, 87849, 87850, 87851, 87852, 87853, 87854, 87855, 87856,
      87857, 87859, 87860, 87861, 87862, 87864, 87863, 87865, 87866, 87867,
      87847, 87848, 87869, 87870, 87871, 87872, 87873, 87874, 87875, 87876,
      87877, 87878, 87879, 87880, 87881, 87883, 87884, 87885, 87886, 87887,
      87888, 87889, 87890, 87891, 87893, 87894, 87895, 87896, 87897, 87898,
      87899, 87900, 87901, 87902, 87903, 87904, 87905, 87907, 87908, 87909,
      87910, 87911, 87912, 87913, 87914, 87915, 87917, 87918, 87919, 87920,
      87921, 87922, 87923, 87924, 87925, 87926, 87927, 87928, 87929, 87931,
      87932, 87933, 87934, 87935, 87936, 87937, 87938, 87939, 87941, 87943,
      87944, 87945, 87947, 87948, 87949, 87950, 87951, 87952, 87953, 87955,
      87956, 87957, 87958, 87959, 87960, 87961, 87962, 87963, 87942, 87946,
      87965, 87966, 87967, 87968, 87969, 87970, 87971, 87972, 87973, 87974,
      87975, 87976, 87977, 87979, 87980, 87981, 87982, 87983, 87984, 87985,
      87986, 87987, 87989, 87990, 87991, 87992, 87993, 87995, 87996, 87997,
      87998, 88000, 88001, 88004, 88003, 88005, 88006, 88007, 87999, 88008,
      87994, 88009, 88010, 88011, 88013, 88014, 88015, 88016, 88017, 88018,
      88019, 88020, 88022, 88023, 88024, 88025, 88027, 88028, 88029, 88030,
      88031, 88032, 88033, 88034, 88123, 88124, 88125, 88126, 88127, 88128,
      88130,
    ];
    await workOrderController.setDeleted({
      identifier: { code: { $in: orderCodes } },
      userId: user._id,
      value: true,
    });

    // results.push(await loadAreasFromCsv());
    // results.push(await loadLinesFromCsv());
    // results.push(await createDeviceOptions());
    // results.push(await createWOoptions());
    // results.push(await createUserOptions());

    // results.push(await loadServicePointsFromCsv());
    // results.push(await loadGasesFromCsv());

    // await ServicePoint.updateMany({}, { devices: [] });

    // results.push(await loadDevicesFromCsv());
    // results.push(await loadRelationEqLsFromCsv());
    // results.push(await createUsers());

    // add mayuda user. check hour and descriptions not startin with "="

    // results.push(await loadOTfromCsv());
    // results.push(await loadInterventionFromCsv());

    // consumos de gases

    // results.push(await updateData());

    //consumos de gases
    res.status(200).send(results);
  } catch (e) {
    console.log(e);
    res.status(500).send(e.message);
  }
});

module.exports = server;
